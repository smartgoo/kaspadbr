from typing import Optional

class Address:

    def __init__(self, address: str) -> None: ...

    @staticmethod
    def validate(address: str) -> bool: ...

    def to_string(self) -> str: ...

    def version(self) -> str: ...

    def set_prefix(self, prefix: str) -> None: ...

    def payload(self) -> str: ...

    def short(self, n: int) -> str: ...


class DerivationPath:

    def __init__(self, path: str) -> None: ...

    def is_empty(self) -> bool: ...

    def length(self) -> int: ...

    def parent(self) -> Optional[DerivationPath]: ...

    def push(self, child_number: int, hardened: bool) -> None: ...

    def to_str(self) -> str: ...


class Keypair:
    
    def xonly_public_key(self) -> str: ...

    def public_key(self) -> str: ...

    def private_key(self) -> str: ...
        
    def to_address(self, network: str) -> Address: ...

    def to_address_ecdsa(self, network: str) -> Address: ...

    @staticmethod
    def random() -> Keypair: ...

    @staticmethod
    def from_private_key(secret_key: PrivateKey) -> Keypair: ...


class PrivateKey:

    def __init__(self, secret_key: str) -> None: ...

    def to_string(self) -> str: ...

    def to_public_key(self) -> PublicKey: ...

    def to_address(self, network: str) -> Address: ...

    def to_address_ecdsa(self, network: str) -> Address: ...

    def to_keypair(self) -> Keypair: ...

    @staticmethod
    def try_new(key: str) -> PrivateKey: ...


class PrivateKeyGenerator:

    def __init__(self, xprv: str, is_multisig: bool,
                 account_index: int, cosigner_index: int) -> str: ...

    def receive_key(self, index: int) -> PrivateKey: ...

    def change_key(self, index: int) -> PrivateKey: ...


class PublicKey:

    def __init__(self, key: str) -> None: ...

    def to_string(self) -> str: ...

    def to_address(self, network: str) -> Address: ...

    def to_address_ecdsa(self, network: str) -> Address: ...

    def to_x_only_public_key(self) -> XOnlyPublicKey: ...


class PublicKeyGenerator:

    @staticmethod
    def from_xpub(kpub: str, cosigner_index: Optional[int]) ->PublicKeyGenerator: ...

    @staticmethod
    def from_master_xprv(xprv: str, is_multisig: bool, account_index: int, cosigner_index: Optional[int]) -> PublicKeyGenerator: ...

    def receive_pubkeys(self, start: int, end: int) -> list[PublicKey]: ...

    def receive_pubkey(self, index: int) -> list[PublicKey]: ...

    def receive_pubkeys_as_strings(self, start: int, end: int) -> list[str]: ...

    def receive_pubkey_as_string(self, index: int) -> str: ...

    def receive_addresses(self, network_type: str, start: int, end: int) -> list[Address]: ...

    def receive_address(self, network_type: str, index: int) -> Address: ...

    def receive_addresses_as_strings(self, network_type: str, start: int, end: int) -> list[str]: ...

    def receive_address_as_string(self, network_type: str, index: int) -> str: ...

    def change_pubkeys(self, start: int, end: int) -> list[PublicKey]: ...

    def change_pubkey(self, index: int) -> list[PublicKey]: ...

    def change_pubkeys_as_strings(self, start: int, end: int) -> list[str]: ...

    def change_pubkey_as_string(self, index: int) -> str: ...

    def change_addresses(self, network_type: str, start: int, end: int) -> list[Address]: ...

    def change_address(self, network_type: str, index: int) -> Address: ...

    def change_addresses_as_strings(self, network_type: str, start: int, end: int) -> list[str]: ...

    def change_address_as_string(self, network_type: str, index: int) -> str: ...

    def to_string(self) -> str: ...


class XOnlyPublicKey:

    def __init__(self, key: str) -> None: ...

    def to_string(self) -> str: ...

    def to_address(self, network: str) -> Address: ...

    def to_address_ecdsa(self, network: str) -> Address: ...

    @staticmethod
    def from_address(address: Address) -> XOnlyPublicKey: ...


class XPrv:

    def __init__(self, seed: str) -> None: ...

    @staticmethod
    def from_xprv_str(xprv: str) -> XPrv: ...

    def derive_child(self, chile_number: int, hardened: Optional[bool]) -> XPrv: ...

    def derive_path(self, path: str) -> XPrv: ...

    def into_string(self, prefix: str) -> str: ...

    def to_str(self) -> str: ...

    def to_xpub(self) -> XPub: ...


class XPub:

    def __init__(self, xpub: str) -> None: ...

    def derive_child(self, chile_number: int, hardened: Optional[bool]) -> XPub: ...

    def derive_path(self, path: str) -> XPub: ...

    def to_str(self, prefix: str) -> str: ...

    def public_key(self) -> PublicKey: ...


class RpcClient:

    def __init__(self, url: str) -> None: ...

    def is_connected(self) -> bool: ...

    def connect(self) -> None: ...

    def disconnect(self) -> None: ...

    # TODO rest of RpcClient stub
