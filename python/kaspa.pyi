from typing import Any, Callable, Optional

class Address:

    def __init__(self, address: str) -> None: ...

    @staticmethod
    def validate(address: str) -> bool: ...

    def to_string(self) -> str: ...

    @property
    def version(self) -> str: ...

    @property
    def prefix(self) -> str: ...

    @prefix.setter
    def set_prefix(self, prefix: str) -> None: ...

    def payload(self) -> str: ...

    def short(self, n: int) -> str: ...


class ScriptPublicKey:

    def __init__(self, version: int, script: str) -> None: ...

    @property
    def script(self) -> str: ...


class Transaction:

    def is_coinbase(self) -> bool: ...

    def finalize(self) -> str: ...

    def id(self) -> str: ...

    def __init__(
        self, 
        version: int, 
        inputs: list[TransactionInput], 
        outputs: list[TransactionOutput], 
        lock_time: int, 
        subnetwork_id: str, 
        gas: int,
        payload: list[int] 
    ) -> None: ...

    @property
    def inputs(self) -> list[TransactionInput]: ...

    @inputs.setter
    def inputs(self, v: list[TransactionInput]) -> None: ...

    def addresses(self) -> list[Address]: ...

    @property
    def outputs(self) -> list[TransactionOutput]: ...

    @outputs.setter
    def outputs(self, v: list[TransactionOutput]) -> None: ...

    @property
    def version(self) -> int: ...

    @version.setter
    def version(self, v: int) -> None: ...

    @property
    def lock_time(self) -> int: ...

    @lock_time.setter
    def lock_time(self, v: int) -> None: ...

    @property
    def gas(self) -> int: ...

    @gas.setter
    def gas(self, v: int) -> None: ...

    @property
    def subnetwork_id(self) -> str: ...

    @subnetwork_id.setter
    def subnetwork_id(self, v: str) -> None: ...

    @property
    def payload(self) -> str: ...

    @payload.setter
    def payload(self, v: str) -> None: ...

    def serialize_to_dict(self) -> dict: ...


class TransactionInput:

    def __init__(self, previous_outpoint: TransactionOutpoint, signature_script: str, sequence: int, sig_op_count: int, utxo: Optional[UtxoEntryReference]) -> None: ...

    @property
    def previous_outpoint(self) -> TransactionOutpoint: ...

    @previous_outpoint.setter
    def previous_outpoint(self, v: TransactionOutpoint) -> None: ...

    @property
    def signature_script(self) -> str: ...

    @signature_script.setter
    def signature_script(self, v: str) -> None: ...

    @property
    def sequence(self) -> int: ...

    @sequence.setter
    def sequence(self, v: int) -> None: ...

    @property
    def sig_op_count(self) -> int: ...

    @sig_op_count.setter
    def sig_op_count(self, v: int) -> None: ...

    @property
    def utxo(self) -> Optional[UtxoEntryReference]: ...


class TransactionOutpoint:
    
    def __init__(self, transaction_id: str, index: int) -> None: ...

    def get_id(self) -> str: ...

    @property
    def transaction_id(self) -> str: ...

    @property
    def index(self) -> int: ...


class TransactionOutput:

    def __init__(self, value: int, script_public_key: ScriptPublicKey) -> None: ...

    @property
    def value(self) -> int: ...

    @value.setter
    def value(self, v: int) -> None: ...

    @property
    def script_public_key(self) -> int: ...

    @script_public_key.setter
    def script_public_key(self, v: ScriptPublicKey) -> None: ...


class UtxoEntry:

    @property
    def address(self) -> Optional[Address]: ...

    @property
    def outpoint(self) -> TransactionOutpoint: ...

    @property
    def amount(self) -> int: ...

    @property
    def script_public_key(self) -> ScriptPublicKey: ...

    @property
    def block_daa_score(self) -> int: ...

    @property
    def is_coinbase(self) -> bool: ...


class UtxoEntryReference:

    @property
    def entry(self) -> UtxoEntry: ...

    @property
    def outpoint(self) -> TransactionOutpoint: ...

    @property
    def address(self) -> Optional[Address]: ...

    @property
    def amount(self) -> int: ...

    @property
    def is_coinbase(self) -> bool: ...

    @property
    def block_daa_score(self) -> int: ...

    @property
    def script_public_key(self) -> ScriptPublicKey: ...


class PaymentOutput:

    def __init__(self, address: Address, amount: int) -> None: ...


def create_transaction(
    utxo_entry_source: list[dict],
    outputs: list[dict],
    priority_fee: int,
    payload: Optional[list[int]],
    sig_op_count: Optional[int]
) -> Transaction: ...

def sign_transaction(tx: Transaction, signer: list[PrivateKey], verify_sig: bool) -> Transaction: ...


class DerivationPath:

    def __init__(self, path: str) -> None: ...

    def is_empty(self) -> bool: ...

    def length(self) -> int: ...

    def parent(self) -> Optional[DerivationPath]: ...

    def push(self, child_number: int, hardened: bool) -> None: ...

    def to_str(self) -> str: ...


class Keypair:
    # def new(self) -> Keypair: ...

    @property
    def xonly_public_key(self) -> str: ...

    @property
    def public_key(self) -> str: ...

    @property
    def private_key(self) -> str: ...
        
    def to_address(self, network: str) -> Address: ...

    def to_address_ecdsa(self, network: str) -> Address: ...

    @staticmethod
    def random() -> Keypair: ...

    @staticmethod
    def from_private_key(secret_key: PrivateKey) -> Keypair: ...


class PrivateKey:

    def __init__(self, secret_key: str) -> None: ...

    def to_string(self) -> str: ...

    def to_public_key(self) -> PublicKey: ...

    def to_address(self, network: str) -> Address: ...

    def to_address_ecdsa(self, network: str) -> Address: ...

    def to_keypair(self) -> Keypair: ...


class PrivateKeyGenerator:

    def __init__(self, xprv: str, is_multisig: bool,
                 account_index: int, cosigner_index: int) -> str: ...

    def receive_key(self, index: int) -> PrivateKey: ...

    def change_key(self, index: int) -> PrivateKey: ...


class PublicKey:

    def __init__(self, key: str) -> None: ...

    def to_string(self) -> str: ...

    def to_address(self, network: str) -> Address: ...

    def to_address_ecdsa(self, network: str) -> Address: ...

    def to_x_only_public_key(self) -> XOnlyPublicKey: ...


class PublicKeyGenerator:

    @staticmethod
    def from_xpub(kpub: str, cosigner_index: Optional[int]) ->PublicKeyGenerator: ...

    @staticmethod
    def from_master_xprv(xprv: str, is_multisig: bool, account_index: int, cosigner_index: Optional[int]) -> PublicKeyGenerator: ...

    def receive_pubkeys(self, start: int, end: int) -> list[PublicKey]: ...

    def receive_pubkey(self, index: int) -> list[PublicKey]: ...

    def receive_pubkeys_as_strings(self, start: int, end: int) -> list[str]: ...

    def receive_pubkey_as_string(self, index: int) -> str: ...

    def receive_addresses(self, network_type: str, start: int, end: int) -> list[Address]: ...

    def receive_address(self, network_type: str, index: int) -> Address: ...

    def receive_addresses_as_strings(self, network_type: str, start: int, end: int) -> list[str]: ...

    def receive_address_as_string(self, network_type: str, index: int) -> str: ...

    def change_pubkeys(self, start: int, end: int) -> list[PublicKey]: ...

    def change_pubkey(self, index: int) -> list[PublicKey]: ...

    def change_pubkeys_as_strings(self, start: int, end: int) -> list[str]: ...

    def change_pubkey_as_string(self, index: int) -> str: ...

    def change_addresses(self, network_type: str, start: int, end: int) -> list[Address]: ...

    def change_address(self, network_type: str, index: int) -> Address: ...

    def change_addresses_as_strings(self, network_type: str, start: int, end: int) -> list[str]: ...

    def change_address_as_string(self, network_type: str, index: int) -> str: ...

    def to_string(self) -> str: ...


class XOnlyPublicKey:

    def __init__(self, key: str) -> None: ...

    def to_string(self) -> str: ...

    def to_address(self, network: str) -> Address: ...

    def to_address_ecdsa(self, network: str) -> Address: ...

    @staticmethod
    def from_address(address: Address) -> XOnlyPublicKey: ...


class XPrv:

    def __init__(self, seed: str) -> None: ...

    @staticmethod
    def from_xprv_str(xprv: str) -> XPrv: ...

    def derive_child(self, chile_number: int, hardened: Optional[bool]) -> XPrv: ...

    def derive_path(self, path: str) -> XPrv: ...

    def into_string(self, prefix: str) -> str: ...

    def to_str(self) -> str: ...

    def to_xpub(self) -> XPub: ...

    def to_private_key(self) -> XPub: ...

    @property
    def xprv(self) -> str: ...

    @property
    def private_key(self) -> str: ...

    @property
    def depth(self) -> int: ...

    @property
    def parent_fingerprint(self) -> int: ...

    @property
    def child_number(self) -> int: ...

    @property
    def chain_code(self) -> str: ...


class XPub:

    def __init__(self, xpub: str) -> None: ...

    def derive_child(self, chile_number: int, hardened: Optional[bool]) -> XPub: ...

    def derive_path(self, path: str) -> XPub: ...

    def to_str(self, prefix: str) -> str: ...

    def public_key(self) -> PublicKey: ...

    @property
    def xpub(self) -> str: ...

    @property
    def depth(self) -> int: ...

    @property
    def parent_fingerprint(self) -> str: ...

    @property
    def child_number(self) -> int: ...

    @property
    def chain_code(self) -> str: ...


class Resolver:

    def __init__(self, urls: Optional[list[str]], tls: Optional[int]) -> None: ...

    def urls(self) -> list[str]: ...

    def get_node(self, encoding: str, network: str, network_suffix: Optional[int]) -> dict: ...

    def get_url(self, encoding: str, network: str, network_suffix: Optional[int]) -> str: ...

    def connect(self, encoding: str, network: str, network_suffix: Optional[int]) -> RpcClient: ...


class RpcClient:

    def __init__(self, resolver: Optional[Resolver], url: Optional[str], encoding: Optional[str], network: Optional[str], network_suffix: Optional[str]) -> None: ...

    @property
    def url(self) -> str: ...

    @property
    def resolver(self) -> Optional[Resolver]: ...

    def set_resolver(self, Resolver) -> None: ...

    def set_network_id(self, network: str, network_suffix: Optional[int]) -> None: ...

    @property
    def is_connected(self) -> bool: ...

    @property
    def encoding(self) -> str: ...

    @property
    def node_id(self) -> str: ...

    async def connect(self, block_async_connect: Optional[bool], strategy: Optional[str], url: Optional[str], timeout_duration: Optional[int], retry_interval: Optional[int]) -> None: ...

    async def disconnect(self) -> None: ...

    async def start(self) -> None: ...

    def trigger_abort(self) -> None: ...

    def add_event_listener(self, event: str, callback: Callable[..., Any], *args: Any, **kwargs: Any) -> None: ...

    def remove_event_listener(self, event: str, callback: Callable[..., Any]) -> None: ...

    def remove_all_event_listeners(self) -> None: ...

    @staticmethod
    def default_port(encoding: str, network: str) -> int: ...

    @staticmethod
    def parse_url(url: str, encoding: str, network: str) -> str: ...

    async def subscribe_utxos_changed(self, addresses: list[Address]) -> None: ...
    
    async def unsubscribe_utxos_changed(self, addresses: list[Address]) -> None: ...

    async def subscribe_virtual_chain_changed(self, include_accepted_transaction_ids: bool) -> None: ...
    
    async def unsubscribe_virtual_chain_changed(self, include_accepted_transaction_ids: bool) -> None: ...

    async def subscribe_block_added(self) -> None: ...
    
    async def unsubscribe_block_added(self) -> None: ...

    async def subscribe_finality_conflict(self) -> None: ...
    
    async def unsubscribe_finality_conflict(self) -> None: ...

    async def subscribe_finality_conflict_resolved(self) -> None: ...
    
    async def unsubscribe_finality_conflict_resolved(self) -> None: ...

    async def subscribe_new_block_template(self) -> None: ...
    
    async def unsubscribe_new_block_template(self) -> None: ...

    async def subscribe_pruning_point_utxo_set_override(self) -> None: ...
    
    async def unsubscribe_pruning_point_utxo_set_override(self) -> None: ...
    
    async def subscribe_sink_blue_score_changed(self) -> None: ...
    
    async def unsubscribe_sink_blue_score_changed(self) -> None: ...
    
    async def subscribe_virtual_daa_score_changed(self) -> None: ...
    
    async def unsubscribe_virtual_daa_score_changed(self) -> None: ...

    async def get_block_count_call(self, request: Optional[dict]) -> dict: ...
    
    async def get_block_dag_info_call(self, request: Optional[dict]) -> dict: ...
    
    async def get_coin_supply_call(self, request: Optional[dict]) -> dict: ...
    
    async def get_connected_peer_info_call(self, request: Optional[dict]) -> dict: ...
    
    async def get_info_call(self, request: Optional[dict]) -> dict: ...
    
    async def get_peer_addresses_call(self, request: Optional[dict]) -> dict: ...
            
    async def get_sink_call(self, request: Optional[dict]) -> dict: ...
    
    async def get_sink_blue_score_call(self, request: Optional[dict]) -> dict: ...
    
    async def ping_call(self, request: Optional[dict]) -> dict: ...
    
    async def shutdown_call(self, request: Optional[dict]) -> dict: ...
    
    async def get_server_info_call(self, request: Optional[dict]) -> dict: ...
    
    async def get_sync_status_call(self, request: Optional[dict]) -> dict: ...
    
    async def add_peer_call(self, request: dict) -> dict: ...
    
    async def ban_call(self, request: dict) -> dict: ...
    
    async def estimate_network_hashes_per_second_call(self, request: dict) -> dict: ...
    
    async def get_balance_by_address_call(self, request: dict) -> dict: ...
    
    async def get_balances_by_addresses_call(self, request: dict) -> dict: ...
    
    async def get_block_call(self, request: dict) -> dict: ...
    
    async def get_blocks_call(self, request: dict) -> dict: ...
    
    async def get_block_template_call(self, request: dict) -> dict: ...
    
    async def get_connections_call(self, request: dict) -> dict: ...

    async def get_current_block_color_call(self, request: dict) -> dict: ...
    
    async def get_daa_score_timestamp_estimate_call(self, request: dict) -> dict: ...
    
    async def get_fee_estimate_call(self, request: dict) -> dict: ...
    
    async def get_fee_estimate_experimental_call(self, request: dict) -> dict: ...
    
    async def get_current_network_call(self, request: dict) -> dict: ...
    
    async def get_headers_call(self, request: dict) -> dict: ...
    
    async def get_mempool_entries_call(self, request: dict) -> dict: ...
    
    async def get_mempool_entries_by_addresses_call(self, request: dict) -> dict: ...
    
    async def get_mempool_entry_call(self, request: dict) -> dict: ...
    
    async def get_metrics_call(self, request: dict) -> dict: ...

    async def get_subnetwork_call(self, request: dict) -> dict: ...
    
    async def get_utxos_by_addresses_call(self, request: dict) -> dict: ...
    
    async def get_virtual_chain_from_block_call(self, request: dict) -> dict: ...
    
    async def resolve_finality_conflict_call(self, request: dict) -> dict: ...
    
    # async def submit_block_call(self, request: dict) -> dict: ...
    
    async def submit_transaction_call(self, request: dict) -> dict: ...
    
    async def submit_transaction_replacement_call(self, request: dict) -> dict: ...

    async def unban_call(self, request: dict) -> dict: ...
